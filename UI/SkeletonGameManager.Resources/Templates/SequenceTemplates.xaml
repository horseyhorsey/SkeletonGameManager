<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib"
                    PresentationTraceSources.TraceLevel="High"
                    xmlns:transforms="clr-namespace:SkeletonGame.Models.Transition;assembly=SkeletonGame.Models"
                    xmlns:model="clr-namespace:SkeletonGame.Models;assembly=SkeletonGame.Models"
                    xmlns:conv="clr-namespace:SkeletonGameManager.Resources.Converters"
                    xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit">
    
    <conv:StyleConverter x:Key="StyleConverter"/>

    <ObjectDataProvider x:Key="VJustifyOptions" ObjectType="{x:Type sys:Enum}" MethodName="GetValues">
        <ObjectDataProvider.MethodParameters>
            <x:Type TypeName="model:VJustify"/>
        </ObjectDataProvider.MethodParameters>
    </ObjectDataProvider>

    <ObjectDataProvider x:Key="HJustifyOptions" ObjectType="{x:Type sys:Enum}" MethodName="GetValues">
        <ObjectDataProvider.MethodParameters>
            <x:Type TypeName="model:HJustify"/>
        </ObjectDataProvider.MethodParameters>
    </ObjectDataProvider>

    <ObjectDataProvider x:Key="Transitions" ObjectType="{x:Type sys:Enum}" MethodName="GetValues">
        <ObjectDataProvider.MethodParameters>
            <x:Type TypeName="transforms:TransitionType"/>
        </ObjectDataProvider.MethodParameters>
    </ObjectDataProvider>

    <ObjectDataProvider x:Key="TransParams" ObjectType="{x:Type sys:Enum}" MethodName="GetValues">
        <ObjectDataProvider.MethodParameters>
            <x:Type TypeName="transforms:TransitionParam"/>
        </ObjectDataProvider.MethodParameters>
    </ObjectDataProvider>

    <DataTemplate x:Key="SequenceTemplate">
        <GroupBox Header="{Binding}">
            <StackPanel>
                <TextBox Text="{Binding Sequence.duration}"/>
                <TextBox Text="{Binding Sequence.lampshow}"/>
                <TextBox Text="{Binding Sequence.Sound}"/>
                <TextBox Text="{Binding Sequence.Font}"/>
                <TextBox Text="{Binding Sequence.FontStyle}"/>
                <TextBox Text="{Binding Sequence.Animation}"/>
            </StackPanel>
        </GroupBox>
    </DataTemplate>

    <Style x:Key="Panel_Font" TargetType="Button">
        <Setter Property="Command" Value="{Binding SetAttractValueCommand}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border BorderThickness="2" BorderBrush="Black">
                        <DockPanel Margin="3">
                            <Label Content="{TemplateBinding CommandParameter}"/>
                            <TextBlock Text="{TemplateBinding Content}" FontSize="16" VerticalAlignment="Center"/>
                        </DockPanel>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="Style_AssetCombo" TargetType="ComboBox">
        <Setter Property="SelectedValuePath" Value="Key"/>
    </Style>

    <Style x:Key="Style_AnimAssetCombo" TargetType="ComboBox">
        <Setter Property="SelectedValuePath" Value="Name"/>
    </Style>


    <Style x:Key="Style_FontCombo" BasedOn="{StaticResource Style_AssetCombo}" 
           TargetType="ComboBox">
        <Setter Property="ItemsSource" Value="{Binding ElementName=LayoutRoot, Path=DataContext._skeletonGameProvider.AssetsConfig.Fonts.HdFonts, UpdateSourceTrigger=PropertyChanged}"/>
        <Setter Property="SelectedValue" Value="{Binding Font,UpdateSourceTrigger=PropertyChanged}"/>
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <StackPanel Orientation="Horizontal">
                        <TextBlock Text="{Binding Size, StringFormat={} Size: {0}}"/>
                        <TextBlock Text="{Binding Key, StringFormat={} Key: {0}}"/>
                        <TextBlock Text="{Binding File, StringFormat={} Key: {0}}"/>
                    </StackPanel>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="Style_FontStyleCombo" BasedOn="{StaticResource Style_AssetCombo}" 
           TargetType="ComboBox">
        <Setter Property="ItemsSource" 
                Value="{Binding ElementName=LayoutRoot, Path=DataContext._skeletonGameProvider.AssetsConfig.Fonts.FontStyles}"/>
        <Setter Property="SelectedValue" Value="{Binding FontStyle,UpdateSourceTrigger=PropertyChanged}"/>
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <StackPanel Orientation="Horizontal">
                        <TextBlock Text="{Binding Key}"/>
                        <!--<Rectangle Fill="{Binding InteriorColor, Converter={StaticResource ListToColorConv},Mode=OneTime}"/>-->
                    </StackPanel>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="Style_AnimationsCombo" BasedOn="{StaticResource Style_AssetCombo}" 
           TargetType="ComboBox">
        <Setter Property="ItemsSource" 
                Value="{Binding ElementName=LayoutRoot, 
            Path=DataContext._skeletonGameProvider.AssetsConfig.Animations, 
            UpdateSourceTrigger=PropertyChanged}"/>
        <Setter Property="SelectedValue" Value="{Binding Animation,UpdateSourceTrigger=PropertyChanged}"/>
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <StackPanel Orientation="Horizontal">
                        <TextBlock Text="{Binding Key}"/>
                        <!--<Rectangle Fill="{Binding InteriorColor, Converter={StaticResource ListToColorConv},Mode=OneTime}"/>-->
                    </StackPanel>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="Style_AttractAnimationsCombo" BasedOn="{StaticResource Style_AssetCombo}" 
           TargetType="ComboBox">
        <Setter Property="ItemsSource" Value="{Binding ElementName=LayoutRoot, Path=DataContext._skeletonGameProvider.AssetsConfig.Animations, UpdateSourceTrigger=PropertyChanged}"/>
        <Setter Property="SelectedValue" Value="{Binding Name,UpdateSourceTrigger=PropertyChanged}"/>
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <StackPanel Orientation="Horizontal">
                        <TextBlock Text="{Binding Key}"/>
                        <!--<Rectangle Fill="{Binding InteriorColor, Converter={StaticResource ListToColorConv},Mode=OneTime}"/>-->
                    </StackPanel>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="Style_SoundsCombo" BasedOn="{StaticResource Style_AssetCombo}" 
           TargetType="ComboBox">
        <Setter Property="ItemsSource" Value="{Binding ElementName=LayoutRoot, Path=DataContext._skeletonGameProvider.AssetsConfig.Audio.AllAudio}"/>
        <Setter Property="SelectedValue" Value="{Binding Sound,UpdateSourceTrigger=PropertyChanged}"/>
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <StackPanel Orientation="Horizontal">
                        <TextBlock Text="{Binding Key}"/>
                        <!--<Rectangle Fill="{Binding InteriorColor, Converter={StaticResource ListToColorConv},Mode=OneTime}"/>-->
                    </StackPanel>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="Style_LampsCombo" BasedOn="{StaticResource Style_AssetCombo}" 
           TargetType="ComboBox">
        <Setter Property="ItemsSource" Value="{Binding ElementName=LayoutRoot, Path=DataContext._skeletonGameProvider.AssetsConfig.LampShows}"/>
        <Setter Property="SelectedValue" Value="{Binding lampshow,UpdateSourceTrigger=PropertyChanged}"/>
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <StackPanel Orientation="Horizontal">
                        <TextBlock Text="{Binding Key}"/>
                        <!--<Rectangle Fill="{Binding InteriorColor, Converter={StaticResource ListToColorConv},Mode=OneTime}"/>-->
                    </StackPanel>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Grid x:Key="FontOptionsGrid">

        <GroupBox Header="Font">

            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition/>
                    <ColumnDefinition/>
                </Grid.ColumnDefinitions>

                <ComboBox Style="{StaticResource Style_FontCombo}"/>

                <ComboBox Grid.Column="1" Style="{StaticResource Style_FontStyleCombo}"/>
            </Grid>

        </GroupBox>
    </Grid>

    <Grid x:Key="Attract_Standard">
        <StackPanel>

            <ContentPresenter Content="{StaticResource FontOptionsGrid}"/>


            <GroupBox Header="Visual / Audio">

                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition/>
                        <ColumnDefinition/>
                    </Grid.ColumnDefinitions>

                    <ComboBox Style="{StaticResource Style_AnimationsCombo}"/>

                    <ComboBox Grid.Column="1" Style="{StaticResource Style_SoundsCombo}"/>
                </Grid>

            </GroupBox>

            <Label Content="Duration"/>
            <xctk:DecimalUpDown Value="{Binding duration, UpdateSourceTrigger=PropertyChanged}" 
                                    MinWidth="55" Increment="0.1" Minimum="1.0" 
                                    ClipValueToMinMax="True"/>

            <Label Content="Lampshow"/>
            <ComboBox Style="{StaticResource Style_LampsCombo}"/>
        </StackPanel>
    </Grid>

    <Grid x:Key="Transition_Standard">
        <GroupBox Header="Transition">
            <StackPanel>
                <ComboBox ItemsSource="{Binding Source={StaticResource Transitions}}" SelectedItem="{Binding Transition}"/>
                <ComboBox ItemsSource="{Binding Source={StaticResource TransParams}}" SelectedItem="{Binding TransParam}"/>
                <xctk:IntegerUpDown Value="{Binding TransLength}" Minimum="1" ClipValueToMinMax="True"/>
            </StackPanel>
        </GroupBox>
    </Grid>

    <Grid x:Key="Attract_Text">
        <StackPanel>
            <StackPanel Orientation="Horizontal" VerticalAlignment="Center" Margin="5">
                <Label Content="Font"/>
                <ComboBox Style="{StaticResource Style_FontCombo}"/>

                <Label Content="Style"/>
                <ComboBox Style="{StaticResource Style_FontStyleCombo}"/>
            </StackPanel>

            <Label Content="Sound"/>
            <ComboBox Style="{StaticResource Style_SoundsCombo}"/>

            <Label Content="Lampshow"/>
            <ComboBox Style="{StaticResource Style_LampsCombo}"/>

            <Label Content="Duration"/>
            <xctk:DecimalUpDown Value="{Binding duration}" Increment="0.1" Minimum="1.0" ClipValueToMinMax="True"/>
        </StackPanel>
    </Grid>

    <DataTemplate x:Key="Sequence_LastScores">
        <GroupBox Header="{Binding Name}" DataContext="{Binding Sequence}">
            <Grid>
                <ContentPresenter Content="{StaticResource Attract_Standard}"/>
            </Grid>
        </GroupBox>
    </DataTemplate>

    <DataTemplate x:Key="Sequence_HighScores">
        <GroupBox Header="{Binding Name}" DataContext="{Binding Sequence}">

            <Grid>

                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>

                <GroupBox Header="Order">
                    <ListView ItemsSource="{Binding Order}"                       
                      xmlns:dd="urn:gong-wpf-dragdrop"
                      dd:DragDrop.IsDragSource="True"
                      dd:DragDrop.IsDropTarget="True"
                      dd:DragDrop.DropHandler="{Binding}">
                    </ListView>
                </GroupBox>

                <ContentPresenter Grid.Row="1" Content="{StaticResource Attract_Standard}"/>
            </Grid>
        </GroupBox>
    </DataTemplate>

    <DataTemplate x:Key="Sequence_Combo">
        <GroupBox Header="{Binding Name}" x:Name="LayoutRoot" DataContext="{Binding Sequence}">

            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>

                <!--<ComboBox Style="{StaticResource Style_AttractAnimationsCombo}" Grid.Row="3"/>-->

                <ContentPresenter Content="{StaticResource Transition_Standard}" Grid.Row="2"/>

                <GroupBox Header="Text Lines"  Grid.Row="0" Margin="5" FontSize="14">
                    <DataGrid ItemsSource="{Binding TextEntries, UpdateSourceTrigger=PropertyChanged}"
                              AutoGenerateColumns="False"
                              >
                        <DataGrid.Columns>
                            <DataGridTextColumn Binding="{Binding TextLine, TargetNullValue=null, 
                            UpdateSourceTrigger=PropertyChanged}" Width="5*"/>
                        </DataGrid.Columns>
                    </DataGrid>
                </GroupBox>

                <ContentPresenter Content="{StaticResource Attract_Standard}" Grid.Row="1"/>


            </Grid>
        </GroupBox>
    </DataTemplate>

    <DataTemplate x:Key="Sequence_TextLayer">
        <GroupBox Header="{Binding Name}" DataContext="{Binding Sequence}">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>

                <!--TEXT TO DISPLAY AND WHERE IT'S JUSTIFIED-->
                <StackPanel Margin="3">

                    <TextBox Text="{Binding Text}"/>

                    <xctk:IntegerUpDown Value="{Binding X}" Minimum="0" ClipValueToMinMax="True"/>
                    <xctk:IntegerUpDown Value="{Binding Y}" Minimum="0" ClipValueToMinMax="True"/>
                    <CheckBox IsChecked="{Binding BlinkFrames}"></CheckBox>

                    <StackPanel Orientation="Horizontal" Margin="5">

                        <TextBlock Text="Vert Justify:   " VerticalAlignment="Center"/>
                        <ComboBox VerticalAlignment="Center" ItemsSource="{Binding Source={StaticResource VJustifyOptions}}" SelectedValue="{Binding VJustify, UpdateSourceTrigger=PropertyChanged}"/>

                        <TextBlock Text="    Horz Justify:   " VerticalAlignment="Center"/>
                        <ComboBox VerticalAlignment="Center" ItemsSource="{Binding Source={StaticResource HJustifyOptions}}" SelectedValue="{Binding HJustify, UpdateSourceTrigger=PropertyChanged}"/>

                    </StackPanel>
                </StackPanel>

                <ContentPresenter Content="{StaticResource Attract_Text}" Grid.Row="1"/>
            </Grid>
        </GroupBox>
    </DataTemplate>

    <DataTemplate x:Key="Sequence_Animation">
        <GroupBox Header="{Binding Name}" DataContext="{Binding Sequence}">
            <StackPanel>
                <Label Content="Name"/>
                <ComboBox Style="{StaticResource Style_AttractAnimationsCombo}" SelectedValue="{Binding AnimName}"/>

                <Label Content="Lampshow"/>
                <ComboBox Style="{StaticResource Style_LampsCombo}"/>

                <Label Content="Sound"/>
                <ComboBox Style="{StaticResource Style_SoundsCombo}"/>

                <Label Content="Duration"/>
                <xctk:PropertyGridEditorDecimalUpDown Value="{Binding duration}" Increment="0.1" Minimum="1.0"/>

                <ContentPresenter ContentTemplate="{DynamicResource TransformOption}"/>
            </StackPanel>
        </GroupBox>
    </DataTemplate>

    <DataTemplate x:Key="TransformOption">
        <GroupBox Header="Apply Transforms">
            <StackPanel Margin="5">
                <ContentPresenter ContentTemplate="{DynamicResource ZoomOptions}"/>
                <ContentPresenter ContentTemplate="{DynamicResource MoveOptions}"/>
                <ContentPresenter ContentTemplate="{DynamicResource RotateOptions}"/>
            </StackPanel>
        </GroupBox>
    </DataTemplate>

    <DataTemplate x:Key="ZoomOptions">
        <Expander Header="Zoom">
            <Grid>

                <Grid.ColumnDefinitions>
                    <ColumnDefinition/>
                    <ColumnDefinition/>
                </Grid.ColumnDefinitions>

                <Grid.RowDefinitions>
                    <RowDefinition/>
                    <RowDefinition/>
                    <RowDefinition/>
                    <RowDefinition/>
                </Grid.RowDefinitions>

                <CheckBox x:Name="CheckboxZoom" Content="Enabled" IsChecked="{Binding Sequence.ZoomLayer.IsEnabled, UpdateSourceTrigger=PropertyChanged}"/>

                <CheckBox Content="Hold" Grid.Row="1" IsChecked="{Binding Sequence.ZoomLayer.Hold}" 
                          />

                <xctk:DecimalUpDown Grid.Row="2" Value="{Binding Sequence.ZoomLayer.ScaleStart}" 
                                    Minimum="0.0" Increment="0.1" Maximum="10.0" ClipValueToMinMax="True"
                                    
                                    />
                <xctk:DecimalUpDown Grid.Row="2" Grid.Column="1" Value="{Binding Sequence.ZoomLayer.ScaleStop}"
                                    Minimum="0.0" Increment="0.1" Maximum="10.0" ClipValueToMinMax="True"
                                    
                                    />

                <xctk:IntegerUpDown Grid.Row="3" Value="{Binding Sequence.ZoomLayer.FramesPerZoom}"
                                    
                                    />
                <xctk:IntegerUpDown Grid.Row="3" Grid.Column="1" Value="{Binding Sequence.ZoomLayer.TotalZooms}"
                                    
                                    />
            </Grid>
        </Expander>
    </DataTemplate>

    <DataTemplate x:Key="MoveOptions">
        <Expander Header="Move">
            <Grid>

                <Grid.ColumnDefinitions>
                    <ColumnDefinition/>
                    <ColumnDefinition/>
                    <ColumnDefinition/>
                    <ColumnDefinition/>
                </Grid.ColumnDefinitions>

                <Grid.RowDefinitions>
                    <RowDefinition/>
                    <RowDefinition/>
                    <RowDefinition/>
                    <RowDefinition/>
                </Grid.RowDefinitions>

                <CheckBox x:Name="CheckboxMove" Content="Enabled" IsChecked="{Binding Sequence.MoveLayer.IsEnabled, UpdateSourceTrigger=PropertyChanged}"/>

                <CheckBox Content="Loop" Grid.Row="0" Grid.Column="1" IsChecked="{Binding Sequence.MoveLayer.loop}" 
                          />

                <Label Content="Frames" Grid.Row="1"/>
                <xctk:IntegerUpDown Grid.Row="1" Value="{Binding Sequence.MoveLayer.frames}" 
                                    Grid.Column="1"
                                    Minimum="1" Increment="1" Maximum="1000" ClipValueToMinMax="True"                                    
                                    />

                <Label Content="Start X" Grid.Row="2"/>
                <xctk:DecimalUpDown Grid.Row="2" Grid.Column="1" Value="{Binding Sequence.MoveLayer.start_x}"
                                    Minimum="-1000" Increment="1" Maximum="2000" ClipValueToMinMax="True"                                    
                                    />

                <Label Content="Target X" Grid.Row="2" Grid.Column="2"/>
                <xctk:DecimalUpDown Grid.Row="2" Grid.Column="3" Value="{Binding Sequence.MoveLayer.target_x}"
                                    Minimum="-1000" Increment="1" Maximum="2000" ClipValueToMinMax="True"                                    
                                    />

                <Label Content="Start Y" Grid.Row="3"/>
                <xctk:DecimalUpDown Grid.Row="3" Grid.Column="1" Value="{Binding Sequence.MoveLayer.start_y}"
                                    Minimum="-1000" Increment="1" Maximum="2000" ClipValueToMinMax="True"                                    
                                    />

                <Label Content="Target Y" Grid.Row="3" Grid.Column="2"/>
                <xctk:DecimalUpDown Grid.Row="3" Grid.Column="3" Value="{Binding Sequence.MoveLayer.target_y}"
                                    Minimum="-1000" Increment="1" Maximum="2000" ClipValueToMinMax="True"                                    
                                    />
            </Grid>
        </Expander>
    </DataTemplate>

    <DataTemplate x:Key="RotateOptions">
        <Expander Header="Rotate">
            <Grid>

                <Grid.ColumnDefinitions>
                    <ColumnDefinition/>
                    <ColumnDefinition/>
                    <ColumnDefinition/>
                    <ColumnDefinition/>
                </Grid.ColumnDefinitions>

                <Grid.RowDefinitions>
                    <RowDefinition/>
                    <RowDefinition/>
                    <RowDefinition/>
                    <RowDefinition/>
                </Grid.RowDefinitions>

                <CheckBox x:Name="CheckboxMove" Content="Enabled" IsChecked="{Binding Sequence.RotateLayer.IsEnabled, UpdateSourceTrigger=PropertyChanged}"/>

                <Label Content="X" Grid.Row="1"/>
                <xctk:IntegerUpDown Grid.Row="1" Value="{Binding Sequence.RotateLayer.x}" 
                                    Grid.Column="1"
                                    Minimum="1" Increment="1" Maximum="1000" ClipValueToMinMax="True"                                    
                                    />

                <Label Content="Y" Grid.Row="1" Grid.Column="2"/>
                <xctk:DecimalUpDown Grid.Row="1" Grid.Column="3" Value="{Binding Sequence.RotateLayer.y}"
                                    Minimum="-1000" Increment="1" Maximum="2000" ClipValueToMinMax="True"                                    
                                    />

                <Label Content="Rotation Update Frames" Grid.Row="2" Grid.Column="0"/>
                <xctk:IntegerUpDown Grid.Row="2" Value="{Binding Sequence.RotateLayer.RotateUpdate}" 
                                    Grid.Column="1"
                                    Minimum="1" Increment="1" Maximum="1000" ClipValueToMinMax="True"                                    
                                    />
            </Grid>
        </Expander>
    </DataTemplate>

    <DataTemplate x:Key="Sequence_RandomText">
        <GroupBox Header="{Binding Name}" DataContext="{Binding Sequence}">
            <StackPanel>
                <TextBox Text="{Binding Header}"/>

                <ScrollViewer>
                    <ListView ItemsSource="{Binding TextEntries}">
                        <ListView.ItemTemplate>
                            <DataTemplate>
                                <ListView ItemsSource="{Binding TextLine}"/>
                            </DataTemplate>
                        </ListView.ItemTemplate>

                        <ListView.ItemsPanel>
                            <ItemsPanelTemplate>
                                <VirtualizingStackPanel Orientation="Horizontal"/>
                            </ItemsPanelTemplate>
                        </ListView.ItemsPanel>
                    </ListView>
                </ScrollViewer>

                <ContentPresenter Grid.Row="0" Content="{StaticResource Attract_Standard}"/>

                <GroupBox Header="Script" Grid.Row="1">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>

                        <DataGrid Grid.Row="0" x:Name="TextOptionsListView" Margin="5" ItemsSource="{Binding TextOptions, UpdateSourceTrigger=PropertyChanged}" AutoGenerateColumns="False">
                            <DataGrid.Columns>
                                <DataGridTemplateColumn Width="1*">
                                    <DataGridTemplateColumn.CellTemplate>
                                        <DataTemplate>
                                            <StackPanel Orientation="Horizontal">
                                                <TextBlock Text="{Binding TextEntries[0].TextLine}"/>
                                                <TextBlock Text="{Binding TextEntries[1].TextLine, StringFormat={}| {0}}"/>
                                                <TextBlock Text="{Binding TextEntries[2].TextLine, StringFormat={}| {0}}"/>
                                                <TextBlock Text="{Binding TextEntries[3].TextLine, StringFormat={}| {0}}"/>
                                            </StackPanel>
                                        </DataTemplate>
                                    </DataGridTemplateColumn.CellTemplate>
                                </DataGridTemplateColumn>
                            </DataGrid.Columns>

                        </DataGrid>

                        <DataGrid Grid.Row="1" ItemsSource="{Binding ElementName=TextOptionsListView,Path=SelectedItem.TextEntries,UpdateSourceTrigger=PropertyChanged}" AutoGenerateColumns="False">
                            <DataGrid.Columns>
                                <DataGridTextColumn Binding="{Binding Path=TextLine}" Width="1*"/>
                            </DataGrid.Columns>
                        </DataGrid>

                    </Grid>
                </GroupBox>
            </StackPanel>
        </GroupBox>
    </DataTemplate>

    <DataTemplate x:Key="Sequence_Markup">
        <GroupBox Header="{Binding Name}" DataContext="{Binding Sequence}">
            <StackPanel>
                
                <StackPanel Orientation="Horizontal">
                    <Label Content="Name" VerticalAlignment="Center"/>
                    <TextBox Text="{Binding Name}" MinWidth="100" Margin="10"/>

                    <Label Content="Width" VerticalAlignment="Center"/>
                    <xctk:IntegerUpDown Value="{Binding Width}" Margin="10"/>
                    
                </StackPanel>

                <GroupBox Header="Bold">
                    <StackPanel Orientation="Horizontal">
                        <Label Content="Font"/>
                        <ComboBox Style="{StaticResource Style_FontCombo}" 
                              SelectedValue="{Binding Bold.Font,UpdateSourceTrigger=PropertyChanged}"/>

                        <Label Content="Style"/>
                        <ComboBox Style="{StaticResource Style_FontStyleCombo}"
                              SelectedValue="{Binding Bold.FontStyle}"
                              />
                    </StackPanel>
                </GroupBox>

                <GroupBox Header="Normal">
                    <StackPanel Orientation="Horizontal">
                        <Label Content="Font"/>
                        <ComboBox Style="{StaticResource Style_FontCombo}" 
                              SelectedValue="{Binding Normal.Font}"/>

                        <Label Content="Style"/>
                        <ComboBox Style="{StaticResource Style_FontStyleCombo}"
                              SelectedValue="{Binding Normal.FontStyle}"
                              />
                    </StackPanel>
                </GroupBox>

                <DataGrid ItemsSource="{Binding TextEntries, UpdateSourceTrigger=PropertyChanged}" CanUserAddRows="True" AutoGenerateColumns="False">
                    <DataGrid.Columns>
                        <DataGridTextColumn Binding="{Binding TextLine}" Width="1*"></DataGridTextColumn>
                        <!--<DataGridTemplateColumn Width="1*">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    
                                        <TextBox Text="{Binding TextLine,UpdateSourceTrigger=PropertyChanged}"/>
                                    
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>-->
                    </DataGrid.Columns>
                </DataGrid>

                <Label Content="Animation"/>
                <ComboBox Style="{StaticResource Style_AttractAnimationsCombo}" SelectedValue="{Binding Animation}"/>

                <ContentPresenter Content="{StaticResource Transition_Standard}" Grid.Row="1"/>

                <xctk:PropertyGridEditorDecimalUpDown Value="{Binding duration}" Increment="0.1" Minimum="1.0"/>
            </StackPanel>
        </GroupBox>
    </DataTemplate>

    <DataTemplate x:Key="Sequence_Panning">
        <GroupBox Header="{Binding Name}" x:Name="Root" DataContext="{Binding Sequence}">
            <StackPanel>

                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition/>
                        <RowDefinition/>
                    </Grid.RowDefinitions>

                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>

                    <Grid.Resources>
                        <Style TargetType="{x:Type xctk:IntegerUpDown}">
                            <Setter Property="Margin" Value="5"/>
                        </Style>
                    </Grid.Resources>

                    <Label Content="Height" Grid.Column="0"/>
                    <xctk:IntegerUpDown Grid.Column="1" Value="{Binding Width}"/>

                    <Label Content="Width" Grid.Column="2"/>
                    <xctk:IntegerUpDown Grid.Column="3" Value="{Binding Height}"/>

                    <Label Content="Origin X" Grid.Column="4"/>
                    <xctk:IntegerUpDown Grid.Column="5"
                                        Value="{Binding OriginX}"/>

                    <Label Content="Origin Y" Grid.Column="6"/>
                    <xctk:IntegerUpDown Grid.Column="7" Value="{Binding OriginY}"/>

                    <!--ROW 1-->
                    <Label Content="Scroll X" Grid.Row="1" />
                    <xctk:IntegerUpDown Grid.Column="1" Grid.Row="1"                                          
                                        Text="{Binding ScrollX, UpdateSourceTrigger=PropertyChanged}"/>

                    <Label Content="Scroll Y" Grid.Row="1" Grid.Column="2"/>
                    <xctk:IntegerUpDown Grid.Row="1" Grid.Column="3" Value="{Binding ScrollY}"/>

                    <Label Content="Frames Per Movement" Grid.Row="1" Grid.Column="4"/>
                    <xctk:IntegerUpDown Grid.Row="1" Grid.Column="5" Value="{Binding FramesPerMovement}"/>

                    <Label Content="Bounce" Grid.Row="1" Grid.Column="6"/>
                    <CheckBox Grid.Row="1" Grid.Column="7" Margin="5" IsChecked="{Binding Bounce}"/>


                </Grid>

                <Label Content="Lampshow"/>
                <ComboBox Style="{StaticResource Style_LampsCombo}"/>

                <Label Content="Sound"/>
                <ComboBox Style="{StaticResource Style_SoundsCombo}"/>

                <Label Content="Duration"/>
                <xctk:DecimalUpDown Value="{Binding duration}" Increment="0.1" Minimum="1.0"/>

                <GroupBox Header="Contents - Grouped Layer">
                    <StackPanel Margin="5">

                        <StackPanel Orientation="Horizontal">
                            <Label Content="Width"/>
                            <xctk:IntegerUpDown Value="{Binding Width}"/>

                            <Label Content="Height"/>
                            <xctk:IntegerUpDown Value="{Binding Height}"/>
                        </StackPanel>

                        <Label Content="Layers"/>

                        <DockPanel Grid.Row="1">
                            <ComboBox x:Name="LayerComboboxPanning" Margin="3" SelectedIndex="{Binding ElementName=LayoutRoot,Path=DataContext.SelectedGroupLayerType, UpdateSourceTrigger=PropertyChanged}" 
                                      DockPanel.Dock="Top">
                                <ComboBox.Items>
                                    <ComboBoxItem Content="Animation" IsSelected="True"/>
                                    <ComboBoxItem Content="Markup"/>
                                    <ComboBoxItem Content="Text"/>
                                </ComboBox.Items>
                            </ComboBox>

                            <Button Margin="3"
                            Content="+" Command="{Binding ElementName=LayoutRoot,Path=DataContext.AddLayerCommand }"            
                                   CommandParameter="{Binding Contents.group_layer,UpdateSourceTrigger=PropertyChanged}"
                                         DockPanel.Dock="Bottom"/>
                        </DockPanel>

                        <!---->
                        <!---->
                        <DataGrid x:Name="GroupedLayers" ItemsSource="{Binding Contents.group_layer.Contents}" 
                                  MinHeight="50"
                                  ItemTemplateSelector="{DynamicResource GroupedLayerSelector}"
                                  />

                        <GroupBox Header="Layer Options" Grid.Row="4" Margin="0,50">
                            <Grid  Background="White" >
                                <ContentPresenter ContentTemplateSelector="{DynamicResource GroupedLayerSelector}" 
                                        Content="{Binding ElementName=GroupedLayers,Path=SelectedItem}"/>
                            </Grid>
                        </GroupBox>

                    </StackPanel>
                </GroupBox>
            </StackPanel>
        </GroupBox>
    </DataTemplate>

    <DataTemplate x:Key="Sequence_MoveLayer">
        <GroupBox Header="{Binding Name}" x:Name="Root" DataContext="{Binding Sequence}">
            <StackPanel>

                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition/>
                        <RowDefinition/>
                        <RowDefinition/>
                    </Grid.RowDefinitions>

                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>

                    <Grid.Resources>
                        <Style TargetType="{x:Type xctk:IntegerUpDown}">
                            <Setter Property="Margin" Value="5"/>
                        </Style>
                    </Grid.Resources>

                    <Label Content="StartX" Grid.Column="0"/>
                    <xctk:IntegerUpDown Grid.Column="1"
                                        Value="{Binding start_x}"/>

                    <Label Content="StartY" Grid.Column="2"/>
                    <xctk:IntegerUpDown Grid.Column="3" Value="{Binding start_y}"/>

                    <!--ROW 1-->
                    <Label Content="TargetX" Grid.Column="0" Grid.Row="1"/>
                    <xctk:IntegerUpDown Grid.Column="1"  Grid.Row="1"
                                        Text="{Binding target_x, UpdateSourceTrigger=PropertyChanged}"/>

                    <Label Content="TargetY" Grid.Row="1" Grid.Column="2"/>
                    <xctk:IntegerUpDown Grid.Row="1" Grid.Column="3" Value="{Binding target_y}"/>

                    <Label Content="Frames" Grid.Row="2" Grid.Column="0"/>
                    <xctk:IntegerUpDown Grid.Row="2" Grid.Column="1" Value="{Binding frames}"/>

                    <CheckBox Grid.Row="2" Grid.Column="2" Margin="5" Content="Move Anim"  IsChecked="{Binding move_anim}" VerticalAlignment="Center"/>
                    <CheckBox Grid.Row="2" Grid.Column="3" Margin="5" Content="Move Text" IsChecked="{Binding move_text}" VerticalAlignment="Center"/>
                    <CheckBox Grid.Row="2" Grid.Column="4" Margin="5" Content="Loop?" IsChecked="{Binding loop}" VerticalAlignment="Center"/>

                </Grid>

                <ContentPresenter Content="{StaticResource Attract_Standard}"/>

                <GroupBox Header="Text Lines"  Grid.Row="0" Margin="5" FontSize="14">
                    <DataGrid ItemsSource="{Binding TextEntries, UpdateSourceTrigger=PropertyChanged}"
                              AutoGenerateColumns="False"
                              >
                        <DataGrid.Columns>
                            <DataGridTextColumn Binding="{Binding TextLine, TargetNullValue=null, 
                            UpdateSourceTrigger=PropertyChanged}" Width="5*"/>
                        </DataGrid.Columns>
                    </DataGrid>
                </GroupBox>


            </StackPanel>
        </GroupBox>
    </DataTemplate>

    <DataTemplate x:Key="Content_MoveLayer">
        <GroupBox Header="{Binding Name}" x:Name="Root" DataContext="{Binding move_layer}">
            <StackPanel>

                <TextBox Text="{Binding Name}"/>

                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition/>
                        <RowDefinition/>
                        <RowDefinition/>
                    </Grid.RowDefinitions>

                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>

                    <Grid.Resources>
                        <Style TargetType="{x:Type xctk:IntegerUpDown}">
                            <Setter Property="Margin" Value="5"/>
                        </Style>
                    </Grid.Resources>

                    <Label Content="StartX" Grid.Column="0"/>
                    <xctk:IntegerUpDown Grid.Column="1"
                                        Value="{Binding start_x}"/>

                    <Label Content="StartY" Grid.Column="2"/>
                    <xctk:IntegerUpDown Grid.Column="3" Value="{Binding start_y}"/>

                    <!--ROW 1-->
                    <Label Content="TargetX" Grid.Column="0" Grid.Row="1"/>
                    <xctk:IntegerUpDown Grid.Column="1"  Grid.Row="1"
                                        Text="{Binding target_x, UpdateSourceTrigger=PropertyChanged}"/>

                    <Label Content="TargetY" Grid.Row="1" Grid.Column="2"/>
                    <xctk:IntegerUpDown Grid.Row="1" Grid.Column="3" Value="{Binding target_y}"/>

                    <Label Content="Frames" Grid.Row="2" Grid.Column="0"/>
                    <xctk:IntegerUpDown Grid.Row="2" Grid.Column="1" Value="{Binding frames}"/>

                    <CheckBox Grid.Row="2" Grid.Column="2" Margin="5" Content="Move Anim"  IsChecked="{Binding move_anim}" VerticalAlignment="Center"/>
                    <CheckBox Grid.Row="2" Grid.Column="3" Margin="5" Content="Move Text" IsChecked="{Binding move_text}" VerticalAlignment="Center"/>
                    <CheckBox Grid.Row="2" Grid.Column="4" Margin="5" Content="Loop?" IsChecked="{Binding loop}" VerticalAlignment="Center"/>

                </Grid>

                <ContentPresenter Content="{StaticResource Attract_Standard}"/>

                <GroupBox Header="Text Lines"  Grid.Row="0" Margin="5" FontSize="14">
                    <DataGrid ItemsSource="{Binding TextEntries, UpdateSourceTrigger=PropertyChanged}"
                              AutoGenerateColumns="False"
                              >
                        <DataGrid.Columns>
                            <DataGridTextColumn Binding="{Binding TextLine, TargetNullValue=null, 
                            UpdateSourceTrigger=PropertyChanged}" Width="5*"/>
                        </DataGrid.Columns>
                    </DataGrid>
                </GroupBox>


            </StackPanel>
        </GroupBox>
    </DataTemplate>

    <DataTemplate x:Key="Sequence_ScriptedText" >
        <GroupBox Header="{Binding Name}" DataContext="{Binding Sequence}">
            <Grid>

                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>

                <ContentPresenter Grid.Row="0" Content="{StaticResource Attract_Standard}"/>

                <ContentPresenter Content="{StaticResource Transition_Standard}" Grid.Row="1"/>

                <GroupBox Header="Script" Grid.Row="2">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition/>
                            <RowDefinition/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>

                        <DataGrid Grid.Row="0" x:Name="TextOptionsListView" Margin="5" ItemsSource="{Binding TextOptions, UpdateSourceTrigger=PropertyChanged}" AutoGenerateColumns="False">
                            <DataGrid.Columns>
                                <DataGridTemplateColumn Width="1*">
                                    <DataGridTemplateColumn.CellTemplate>
                                        <DataTemplate>
                                            <StackPanel Orientation="Horizontal">
                                                <TextBlock Text="{Binding TextEntries[0].TextLine}"/>
                                                <TextBlock Text="{Binding TextEntries[1].TextLine, StringFormat={}| {0}}"/>
                                                <TextBlock Text="{Binding TextEntries[2].TextLine, StringFormat={}| {0}}"/>
                                                <TextBlock Text="{Binding TextEntries[3].TextLine, StringFormat={}| {0}}"/>
                                            </StackPanel>
                                        </DataTemplate>
                                    </DataGridTemplateColumn.CellTemplate>
                                </DataGridTemplateColumn>
                            </DataGrid.Columns>

                        </DataGrid>

                        <DataGrid Grid.Row="2" ItemsSource="{Binding ElementName=TextOptionsListView,Path=SelectedItem.TextEntries,UpdateSourceTrigger=PropertyChanged}" AutoGenerateColumns="False">
                            <DataGrid.Columns>
                                <DataGridTextColumn Binding="{Binding Path=TextLine}" Width="1*"/>
                            </DataGrid.Columns>
                        </DataGrid>

                    </Grid>
                </GroupBox>

            </Grid>

        </GroupBox>
    </DataTemplate>

    <DataTemplate x:Key="Sequence_GroupLayer">
        <GroupBox Header="{Binding Name, StringFormat={}Sequence : {0}}" DataContext="{Binding Sequence}">
            <Grid>

                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>

                <StackPanel>
                    <TextBox Text="{Binding Name}"/>
                    <xctk:DecimalUpDown Value="{Binding duration}" MaxWidth="50" HorizontalAlignment="Right"/>

                    <DockPanel Margin="5">
                        <Label Content="Sound:       "/>
                        <ComboBox Style="{StaticResource Style_SoundsCombo}" HorizontalAlignment="Stretch"/>
                    </DockPanel>

                    <DockPanel>
                        <Label Content="Lampshow: "/>
                        <ComboBox Style="{StaticResource Style_LampsCombo}"/>
                    </DockPanel>

                    <GroupBox Header="Transition">
                        <StackPanel>
                            <ComboBox ItemsSource="{Binding Source={StaticResource Transitions}}" SelectedItem="{Binding Transition}"/>
                            <ComboBox ItemsSource="{Binding Source={StaticResource TransParams}}" SelectedItem="{Binding TransParam}"/>
                            <xctk:IntegerUpDown Value="{Binding TransLength}" Minimum="1" ClipValueToMinMax="True"/>
                        </StackPanel>
                    </GroupBox>
                </StackPanel>

                <!--<ContentPresenter Grid.Row="0" Content="{StaticResource Attract_Standard}"/>-->

                <GroupBox Grid.Row="1" Header="Add layer">
                    <DockPanel>
                        <ComboBox x:Name="LayerCombobox" Margin="3"                                                                                                       
                                  SelectedIndex="{Binding ElementName=LayoutRoot,Path=DataContext.SelectedGroupLayerType, UpdateSourceTrigger=PropertyChanged}" DockPanel.Dock="Left">
                            <ComboBox.Items>
                                <ComboBoxItem Content="Animation" IsSelected="True"/>
                                <ComboBoxItem Content="Combo" IsEnabled="False"/>
                                <ComboBoxItem Content="Credits" IsEnabled="False"/>
                                <ComboBoxItem Content="GroupLayer" IsEnabled="False"/>
                                <ComboBoxItem Content="HighScores" IsEnabled="False"/>
                                <ComboBoxItem Content="LastScores" IsEnabled="False"/>
                                <ComboBoxItem Content="MarkupLayer"/>
                                <ComboBoxItem Content="MoveLayer"/>
                                <ComboBoxItem Content="PanningLayer" IsEnabled="False"/>
                                <ComboBoxItem Content="RandomText" IsEnabled="False"/>
                                <ComboBoxItem Content="ScriptedText" IsEnabled="False"/>
                                <ComboBoxItem Content="TextLayer"/>
                            </ComboBox.Items>
                        </ComboBox>

                        <Button Margin="3" 
                Content="+" Command="{Binding ElementName=LayoutRoot,Path=DataContext.AddLayerCommand }"
                            CommandParameter="{Binding ElementName=LayerCombobox, Path=SelectedItem.DataContext,UpdateSourceTrigger=PropertyChanged}" DockPanel.Dock="Right"/>
                    </DockPanel>
                </GroupBox>

                <DataGrid ItemsSource="{Binding Contents}" x:Name="GroupedLayerDataGrid" 
                          Grid.Row="3" CanUserAddRows="False" 
                          CanUserDeleteRows="True" 
                          AutoGenerateColumns="False" 
                          xmlns:dd="urn:gong-wpf-dragdrop"
                          dd:DragDrop.IsDragSource="True"
                          dd:DragDrop.IsDropTarget="True"
                          dd:DragDrop.DropHandler="{Binding}">
                    
                    <DataGrid.Columns>
                        <DataGridTemplateColumn>
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <Label Height="20">
                                        <Label.Style>
                                            <MultiBinding Converter="{StaticResource StyleConverter}">
                                                <MultiBinding.Bindings>
                                                    <Binding RelativeSource="{RelativeSource Self}"/>
                                                    <Binding Path="SequenceName"/>
                                                </MultiBinding.Bindings>
                                            </MultiBinding>
                                        </Label.Style>
                                    </Label>
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>
                        <DataGridTextColumn Binding="{Binding SeqType}" Width="1*" IsReadOnly="True"/>
                    </DataGrid.Columns>
                    
                </DataGrid>

                <GroupBox Header="Layer Options" Grid.Row="4" Margin="0,50">
                    <Grid  Background="White" >
                        <ContentPresenter ContentTemplateSelector="{DynamicResource GroupedLayerSelector}" 
                                        Content="{Binding ElementName=GroupedLayerDataGrid,Path=SelectedItem}"/>
                    </Grid>
                </GroupBox>
            </Grid>
        </GroupBox>
    </DataTemplate>

    <DataTemplate x:Key="Content_AnimationLayer">
        <StackPanel>
           
            <StackPanel Orientation="Horizontal" >

                <Label Content="Animation"/>
                <ComboBox Style="{StaticResource Style_AnimationsCombo}" SelectedValue="{Binding animation_layer.Name}"/>

                <Label Content="X"/>
                <xctk:IntegerUpDown Value="{Binding animation_layer.X}" Minimum="0" ClipValueToMinMax="True"/>

                <Label Content="Y"/>
                <xctk:IntegerUpDown Value="{Binding animation_layer.Y}" Minimum="0" ClipValueToMinMax="True"/>

            </StackPanel>

            <StackPanel Orientation="Horizontal" Margin="0,10">
                <CheckBox Content="Repeat" Margin="3" IsChecked="{Binding animation_layer.Repeat}"/>

                <CheckBox Content="Hold" Margin="3" IsChecked="{Binding animation_layer.Hold}"/>

                <CheckBox Content="Opaque" Margin="3" IsChecked="{Binding animation_layer.Opaque}"/>
            </StackPanel>

            <ContentPresenter ContentTemplate="{DynamicResource TransformOption}"/>
        </StackPanel>
    </DataTemplate>

    <DataTemplate x:Key="Content_MarkupLayer">

        <GroupBox Header="{Binding Name}">
            <StackPanel>
                <xctk:IntegerUpDown Value="{Binding markup_layer.Width}"/>

                <GroupBox Header="Bold">
                    <StackPanel Orientation="Horizontal">
                        <Label Content="Font"/>
                        <ComboBox Style="{StaticResource Style_FontCombo}" 
                              SelectedValue="{Binding markup_layer.Bold.Font,UpdateSourceTrigger=PropertyChanged}"/>

                        <Label Content="Style"/>
                        <ComboBox Style="{StaticResource Style_FontStyleCombo}"
                              SelectedValue="{Binding markup_layer.Bold.FontStyle}"
                              />
                    </StackPanel>
                </GroupBox>

                <GroupBox Header="Normal">
                    <StackPanel Orientation="Horizontal">
                        <Label Content="Font"/>
                        <ComboBox Style="{StaticResource Style_FontCombo}" 
                              SelectedValue="{Binding markup_layer.Normal.Font}"/>

                        <Label Content="Style"/>
                        <ComboBox Style="{StaticResource Style_FontStyleCombo}"
                              SelectedValue="{Binding markup_layer.Normal.FontStyle}"
                              />
                    </StackPanel>
                </GroupBox>

                <DataGrid ItemsSource="{Binding markup_layer.TextEntries, UpdateSourceTrigger=PropertyChanged}" CanUserAddRows="True" AutoGenerateColumns="False"
                          >
                    <DataGrid.Columns>
                        <DataGridTextColumn Binding="{Binding TextLine}" Width="1*"></DataGridTextColumn>
                        <!--<DataGridTemplateColumn Width="1*">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    
                                        <TextBox Text="{Binding TextLine,UpdateSourceTrigger=PropertyChanged}"/>
                                    
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>-->
                    </DataGrid.Columns>
                </DataGrid>

                <!--<Label Content="Animation"/>-->
                <!--<ComboBox Style="{StaticResource Style_AttractAnimationsCombo}" SelectedValue="{Binding markup_layer.Animation}"/>-->
            </StackPanel>
        </GroupBox>

    </DataTemplate>

    <DataTemplate x:Key="Content_TextLayer">
        <StackPanel Margin="3" DataContext="{Binding text_layer}" x:Name="StackTextLayerPanel">

            <TextBox Text="{Binding Text}"/>

            <StackPanel Orientation="Horizontal">
                <Label Content="Font"/>
                <ComboBox Style="{StaticResource Style_FontCombo}" 
                            SelectedValue="{Binding Font}"/>

                <Label Content="Style"/>
                <ComboBox Style="{StaticResource Style_FontStyleCombo}"
                            SelectedValue="{Binding FontStyle}"
                            />
            </StackPanel>

            <StackPanel Orientation="Horizontal" Margin="5">

                <TextBlock Text="Vert Justify:   " VerticalAlignment="Center"/>
                <ComboBox VerticalAlignment="Center" ItemsSource="{Binding Source={StaticResource VJustifyOptions}}" SelectedValue="{Binding VJustify, UpdateSourceTrigger=PropertyChanged}"/>

                <TextBlock Text="    Horz Justify:   " VerticalAlignment="Center"/>
                <ComboBox VerticalAlignment="Center" ItemsSource="{Binding Source={StaticResource HJustifyOptions}}" SelectedValue="{Binding HJustify, UpdateSourceTrigger=PropertyChanged}"/>

            </StackPanel>

            <StackPanel Orientation="Horizontal">
                <DockPanel>
                    <xctk:IntegerUpDown Value="{Binding X}"  ClipValueToMinMax="True"/>
                    <xctk:IntegerUpDown Value="{Binding Y}"  ClipValueToMinMax="True"/>
                </DockPanel>
                <CheckBox IsChecked="{Binding BlinkFrames}" Content="Flashing"></CheckBox>
            </StackPanel>

        </StackPanel>
    </DataTemplate>

    <DataTemplate x:Key="Content_Combo">
        <StackPanel Margin="3" DataContext="{Binding combo_layer}">

            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>

                <GroupBox Header="Text Lines"  Grid.Row="0" Margin="5" FontSize="14">
                    <DataGrid ItemsSource="{Binding TextEntries, UpdateSourceTrigger=PropertyChanged}"
                              AutoGenerateColumns="False"
                              >
                        <DataGrid.Columns>
                            <DataGridTextColumn Binding="{Binding TextLine, TargetNullValue=null, 
                            UpdateSourceTrigger=PropertyChanged}" Width="5*"/>
                        </DataGrid.Columns>
                    </DataGrid>
                </GroupBox>

                <ContentPresenter Content="{StaticResource Attract_Text}" Grid.Row="1"/>

            </Grid>

        </StackPanel>
    </DataTemplate>

    <!--IMPLEMENT IN FRAMEWORK-->
    <DataTemplate x:Key="Content_ScriptedText">
        <GroupBox Header="{Binding Name}" DataContext="{Binding scripted_text_layer}">
            <Grid>

                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>

                <ContentPresenter Grid.Row="0" Content="{StaticResource Attract_Standard}"/>

                <ContentPresenter Content="{StaticResource Transition_Standard}" Grid.Row="1"/>

                <GroupBox Header="Script" Grid.Row="2">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition/>
                            <RowDefinition/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>

                        <DataGrid Grid.Row="0" x:Name="TextOptionsListView" Margin="5" ItemsSource="{Binding TextOptions, UpdateSourceTrigger=PropertyChanged}" AutoGenerateColumns="False">
                            <DataGrid.Columns>
                                <DataGridTemplateColumn Width="1*">
                                    <DataGridTemplateColumn.CellTemplate>
                                        <DataTemplate>
                                            <StackPanel Orientation="Horizontal">
                                                <TextBlock Text="{Binding TextEntries[0].TextLine}"/>
                                                <TextBlock Text="{Binding TextEntries[1].TextLine, StringFormat={} | {0}}"/>
                                                <TextBlock Text="{Binding TextEntries[2].TextLine, StringFormat={} | {0}}"/>
                                                <TextBlock Text="{Binding TextEntries[3].TextLine, StringFormat={} | {0}}"/>
                                            </StackPanel>
                                        </DataTemplate>
                                    </DataGridTemplateColumn.CellTemplate>
                                </DataGridTemplateColumn>
                            </DataGrid.Columns>

                        </DataGrid>

                        <DataGrid Grid.Row="2" ItemsSource="{Binding ElementName=TextOptionsListView,Path=SelectedItem.TextEntries,UpdateSourceTrigger=PropertyChanged}" AutoGenerateColumns="False">
                            <DataGrid.Columns>
                                <DataGridTextColumn Binding="{Binding Path=TextLine}" Width="1*"/>
                            </DataGrid.Columns>
                        </DataGrid>

                    </Grid>
                </GroupBox>

            </Grid>

        </GroupBox>
    </DataTemplate>



</ResourceDictionary>
    